language: python
dist: trusty
sudo: false
branches:
  except:
    - tags
matrix:
  include:
  - python: "2.7"
    env:
    - FLAG=false
      TOXENV=py27
  - python: "3.5"
    env:
    - FLAG=false
      TOXENV=py35
  - python: "3.6"
    env:
    - FLAG=true
      TOXENV=py36
addons:
  apt:
    packages:
    - gcc
    - make
    - libssl-dev
    - python-pip
    - python-dev
    - build-essential
services:
- docker
install:
- travis_retry pip install tox
before_script:
- make docker-pull
script:
- TOXENV=$TOXENV make test
- if [[ "$TRAVIS_PULL_REQUEST" == "true" && "$FLAG" == "true" ]]; then
    pip install -U bumpversion;
    bumpversion patch modeldb/__init__.py;
  fi
- if [[ "$TRAVIS_PULL_REQUEST" == "false" && "$TRAVIS_BRANCH" == "master" && "$FLAG" == "true" ]]; then
    git version;
    git config --global user.email "builds@travis-ci.com";
    git config --global user.name "Travis CI";
    git fetch --tags;
    bumpversion --tag --commit --message '[skip ci] Travis Build {$TRAVIS_BUILD_NUMBER}. Update version {current_version} --> {new_version}' patch modeldb/__init__.py;
    git status;
    git tag -l;
    export GIT_TAG=$(git describe --tags --abbrev=0 --exact-match `git rev-parse HEAD`);
    echo "Pushing commit and tags to branch ${TRAVIS_BRANCH} and tag ${GIT_TAG}...";
    git push https://$GITHUB_TOKEN@github.com/engapa/modeldb-basic.git $TRAVIS_BRANCH;
    git push https://$GITHUB_TOKEN@github.com/engapa/modeldb-basic.git $GIT_TAG;
    echo "Script finished successfully";
    export RELEASE_TAGGED="true";
  fi

before_deploy:
- if [[ "$FLAG" == "true" ]]; then
    make build;
    export TWINE_REPOSITORY_URL="https://upload.testpypi.org/legacy/";
    export PRERELEASE=true;
- if [[ "$RELEASE_TAGGED" == "true" ]]; then
    export TWINE_REPOSITORY_URL="https://upload.pypi.org/legacy/";
    export PRERELEASE=false;
  fi

deploy:
- provider: pypi
  user: $PYPI_USERNAME
  password: $PYPI_PASSWORD
  distributions: "sdist bdist_wheel"
  skip_cleanup: true
  on:
    branch: master
    condition: $FLAG = true or $RELEASE_TAGGED = true
- provider: releases
  overwrite: true
  api_key: $GITHUB_TOKEN
  file_glob: true
  file: dist/*
  skip_cleanup: true
  prerelease: $PRERELEASE
  on:
    branch: master
    condition: $RELEASE_TAGGED = true

notifications:
  email:
    recipients:
      - engapa@gmail.com
    on_success: never # default: change
    on_failure: always # default: always